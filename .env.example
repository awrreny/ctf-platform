# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

# Database Configuration
# Set DB_PROVIDER to either "sqlite" or "postgresql"
DB_PROVIDER="sqlite"

# uncomment if using sqlite
DATABASE_URL="file:./dev.db"

# uncomment if using postgresql (and replace with your real link)
# DATABASE_URL="postgresql://username:password@hostname/database?sslmode=require"


# Security: Control whether plaintext flags are stored in submissions (default: false for security)
# Set to "true" to enable flag storage for analytics purposes
STORE_SUBMISSION_FLAGS="false"

# Rate Limiting with Upstash Redis
# Sign up at https://upstash.com and create a Redis database
# UPSTASH_REDIS_REST_URL="your_redis_url_here"
# UPSTASH_REDIS_REST_TOKEN="your_redis_token_here"
# Alternatively uncomment this to use an in-memory data store (should only be on for development)
# RATE_LIMIT_USE_MEMORY="true"

# Pepper:
# Pepper is an optional security measure that adds an additional layer of protection to hashed values.
# To generate a new pepper, you can use a secure random generator to create a 256-bit hex string. (e.g in python: os.urandom(32).hex())
# To disable the pepper, set it to an empty string
# Changing the pepper will invalidate all existing passwords that use the old pepper
PEPPER_HEX="ad45dc27ec598a8ea00d4a7633540950fb4f1295bba24fa4360ffb1fe9ce78d7"

# generate with `openssl rand -base64 33`
# AUTH_SECRET = 
